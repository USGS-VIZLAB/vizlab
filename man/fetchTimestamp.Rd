% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetchTimestamp.R
\name{fetchTimestamp}
\alias{fetchTimestamp}
\alias{fetchTimestamp.sciencebase}
\alias{fetchTimestamp.file}
\alias{fetchTimestamp.url}
\alias{fetchTimestamp.fetcher}
\title{Update timestamp file if needed}
\usage{
fetchTimestamp(viz)

\method{fetchTimestamp}{sciencebase}(viz)

\method{fetchTimestamp}{file}(viz)

\method{fetchTimestamp}{url}(viz)

\method{fetchTimestamp}{fetcher}(viz)
}
\arguments{
\item{viz}{the identifier for a fetch item in viz.yaml}
}
\value{
It doesn't matter what a fetchTimestamp method returns. It matters a
lot more whether it creates/updates the timestamp file or not.
}
\description{
\code{fetchTimestamp} updates a timestamp file if the local copy of a file is out
of date relative to the data source. In practice, the desired definition of
'out of date' differs widely among data sources, sizes, and projects, so
\code{fetchTimestamp} is a generic function with a method specific to each
\code{fetcher}. Every \code{fetchTimestamp} method should write a timestamp file, or
not, as required to achieve the desired \code{make} behavior. See
\link{fetchTimestampMethods} and \link{fetchTimestampHelpers} for assistance in
defining new fetchTimestamp methods. Also consider preferences.yaml and
\code{\link[=exceededTimeToLive]{exceededTimeToLive()}} for additional options for managing data fetches.

`fetchTimestamp.sciencebase` gets the file timestamp from ScienceBase.

`fetchTimestamp.file` creates a timestamp file once, with file metadata and
file contents that both match the timestamp of the viz data file. If the
timestamp file already exists, it is only modified if the data file is
updated.

`fetchTimestamp.url` checks a URL for a timestamp. The URL headers must
include a 'last-modified' field; otherwise, this method breaks and you should
write your own for the specific URL in question.

\code{fetchTimestamp.fetcher} superclass method catches missing
implementation
}
