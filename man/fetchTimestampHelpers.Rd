% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetchTimestampHelpers.R
\name{fetchTimestampHelpers}
\alias{fetchTimestampHelpers}
\alias{urlFetcher}
\alias{writeTimestamp}
\alias{updateTimestamp}
\alias{formatTimestamp}
\alias{locateTimestampFile}
\alias{readTimestamp}
\title{Methods to assist in writing and debugging custom fetchTimestamp methods}
\usage{
urlFetcher(id, location = NA, remoteURL)

writeTimestamp(new.timestamp, viz, timestamp.mtime = NA)

updateTimestamp(viz, verbose = FALSE)

formatTimestamp(timestamp)

locateTimestampFile(id)

readTimestamp(viz)
}
\arguments{
\item{id}{the viz id - should be the same as for the viz in the calling
function}

\item{location}{the fetched data file location - should be the same as for
the viz in the calling function. May be NA if you're only passing the
output to \code{\link[=fetchTimestamp]{fetchTimestamp()}}; required for \code{\link[=fetch]{fetch()}}.}

\item{remoteURL}{the new URL to use for fetching the data and/or timestamp
(assuming \code{\link[=fetch]{fetch()}} or \code{\link[=fetchTimestamp]{fetchTimestamp()}} is called on the results of this
function)}

\item{new.timestamp}{the new timestamp to write to file}

\item{viz}{a viz item (e.g., from as.viz)}

\item{timestamp.mtime}{the timestamp to assign to the timestamp file's
metadata (using Sys.setFileTime - sets the mtime=modified time property);
NA leaves the metadata alone}

\item{verbose}{logical to pass on to \code{remake::make()}}

\item{timestamp}{POSIXct timestamp to format into a character string}
}
\description{
These functions are used within vizlab \code{\link[=fetchTimestamp]{fetchTimestamp()}} methods and may be
useful within custom methods as well.

\code{urlFetcher} - Creates a temporary viz object that has \code{fetcher: url} and a
custom remoteURL that was probably derived just now in the calling method.
The results of this function can be passed to \code{\link[=fetch]{fetch()}} or
\code{\link[=fetchTimestamp]{fetchTimestamp()}}.

\code{writeTimestamp} writes a timestamp file with the conventions used by
fetchTimestamp - should be used within custom timestamp fetchers to ensure
the expected format is used.

\code{updateTimestamp} can be called from within a \code{fetch} method (at the end of
that method) to update the item's timestamp. This function should rarely be
necessary - really only when the timestamp recorded in the \code{fetchTimestamp()}
call just before this \code{fetch()} call is made to go out of date by this
\code{fetch()} call, e.g., if the timestamp value acquired by \code{fetchTimestamp()}
is based on the modified time of the fetched file. If that's the case, then
calling this function should let remake avoid trying to make the fetched item
again right away. This function uses the recipe defined in remake.yaml to
update the timestamp.

\code{formatTimestamp} formats a POSIXct timestamp according to vizlab timestamp
conventions - converts a timestamp to UTC and creates a character string with
format '%Y-%m-%d %H:%M:%S UTC'.

\code{locateTimestampFile} returns a relative file path to the timestamp file for
an id.

\code{readTimestamp} reads an old timestamp for a viz item, It returns NA if the
file is missing or a POSIXct timestamp if given (as text) within the
timestamp file.
}
\examples{
\dontrun{
# this custom method probably won't do what you want,
# just shows how to use the helper functions
fetchTimestamp.myfetcher <- function(viz) {
  timestamp.file <- locateTimestampFile(viz$id)
  old.timestamp <- readTimestamp(viz)
  new.timestamp <- getOnlineTimestamp() # made-up function, not implemented
  if(!file.exists(timestamp.file) || old.timestamp < new.timestamp) {
    writeTimestamp(new.timestamp, viz)
  }
  invisible()
}
}
\dontrun{
fetchTimestamp.myfetcher <- function(viz) {
  url <- constructURLFromViz(viz)
  urlLastModified(viz$id, remoteURL=url)
}
}
}
